just a few ideaurz I had...




formChanger: #used with a formaccess to perform ops on it

getForm:
    consumes formAccess
    optionally consumes uuid
    returns form

setForm:
    consumes formAccess
    consumes uuid
    consumes json keys data to change to
    returns current interface

addToForm:
    consumes formAccess
    consumes component
    optionally consumes insertion index
    returns current interface


delFromForm:
    consumes formAccess
    comsumes either a valid numeric deletion index or a uuid
    returns current interface

plainNotify
    consumes notify
    consumes string

errorNotify
    consumes notify
    consumes string

getKeyValue
    consumes object
    consumes valid key
    returns corresponding elem

event handler: (event, formAccess, additional, notify)
     [does something]


generic gui block:
    generic event 1...n:consumes an event handler










new elem markup?

uniqueName:
    value:
        {
            "":""
        }
    style:
        {
            "":""
        }
    validation:
        {
            "":""
        }
    hooks:
        {
            "":""
        }





(File ) file
(Number ) num
(Text ) str
(onOff ) bool
(empty) und/null/etc

--------------------------------

(def name [var,var]=>{
...body...
return (text "x");
})

you can also use types instead of def for typed functions

(pipeline [[]=>{return x},[x]=>{return x,y},])

-------------------------------

(list [])

(get [] (number))

(remove [] (number))

(splitBy (string) (string))

(sort [] [first,second]=>{

})

-------------------------------

(group []) object

(addKey [appliedto] (key) {applied})

(removeKey [appliedto] (key))

--------------------------------

(if ()
{}
{})

(() equal to ())

(() and ())

(() or ())

(not {})

(multicond (var) [
    "":{
        ...do...
    }
])

--------------------------------

(loop () [value,position,list]=>{//either number or value, will loop over list or do each character in string or for loop if int, or while if bool

})

(leaveLoop)//break loop

--------------------------------

(() > ())
(() < ())
(() >= ())
(() <= ())

(() + ()) //concat if str, add if num
(() - ()) //subtract with num
(() * ()) //mult if num, build if string
(() / ()) //divide if num
(() remainder ()) //num only

(random whole number () to ())

(randomFraction)

--------------------------------

// cxl_count(text, tokens);
//     text is, for example, "Apple Computer, Inc."
//     tokens is an array, for example, ('chars', 'word', 2)
//     result in this case would be 9 (number of CHARS in WORD 2 of ...)
//
// cxl_get(text, tokens);
//     text is, for example, "Apple Computer, Inc."
//     tokens is an array, for example, ('char', 3, 4, 'word', 2, 3)
//     result in this case would be "mp" (get CHAR 3 to 4 of WORD 2 to 3 of ...)
//
// cxl_delete(text, tokens);
//     text is, for example, "Apple Computer, Inc."
//     tokens is an array, for example, ('char', 6, 8, 'word', 2)
//     result in this case would be "Apple Compu, Inc." (delete CHAR 6 to 8 of WORD 2 of ...)
//
// Get the idea?
//
// cxl_start(text, tokens) returns the position of the first
//     character of the chunk expression, starting from zero.
//
// cxl_end(text, tokens) returns the position of the last
//     character of the chunk expression, starting from zero, plus one.
//
// (These two are used with JavaScript's substring() method on strings.)
//
// cxl_into(text, tokens, newtext) inserts newtext
//     into (tokens) of text.
//
// cxl_before(text, tokens, newtext) inserts newtext
//     before (tokens) of text.
//
// cxl_after(text, tokens, newtext) inserts newtext
//     after (tokens) of text.